# # -*- coding: utf-8 -*-
# """VIIRS_Hotspots.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1RRToi2Wtj4vcwKiLNEbmW3RYLOnoKtT2
# """

# import pandas as pd
# import plotly.express as px
# import requests
# import io

# # Google Cloud Storage URL (ensure it is publicly accessible or use signed URLs)
# CSV_URL = "https://storage.googleapis.com/localsolve_assets/la_wildfires_jan_2025/filtered_la_january_2025_fire_hotspots_combined.csv"

# # Function to fetch and load data
# def load_data():
#     response = requests.get(CSV_URL)
#     if response.status_code == 200:
#         csv_data = response.content  # Get binary content
#         df = pd.read_csv(io.StringIO(csv_data.decode("utf-8")))  # Read into pandas
#         df['acq_date'] = pd.to_datetime(df['acq_date'])  # Convert to datetime

#         # Add acq_time as hour and minute to acq_date
#         df['acq_datetime'] = df['acq_date'] + pd.to_timedelta(df['acq_time'].astype(str).str.zfill(4).str[:2] + ':' + df['acq_time'].astype(str).str.zfill(4).str[2:] + ':00')

#         return df
#     else:
#         print("Failed to load data. Please check the file URL.")
#         return pd.DataFrame()  # Return empty DataFrame if request fails

# # Load dataset
# df = load_data()

# df

# # Ensure data is loaded before proceeding
# if not df.empty:
#     # Select date range for filtering
#     date_min = df['acq_date'].min().date()
#     date_max = df['acq_date'].max().date()

#     # User-defined start and end dates
#     start_date = input(f"Enter Start Date (YYYY-MM-DD, between {date_min} and {date_max}): ")
#     end_date = input(f"Enter End Date (YYYY-MM-DD, between {date_min} and {date_max}): ")

#     start_date = pd.to_datetime(start_date).date()
#     end_date = pd.to_datetime(end_date).date()

#     # Ensure start date is before end date
#     if start_date > end_date:
#         print("Error: Start date must be before end date.")
#     else:
#         # Filter dataset based on selected date range
#         df_filtered = df[(df['acq_date'].dt.date >= start_date) & (df['acq_date'].dt.date <= end_date)]

#         # Display map with Plotly
#         print(f"Generating Fire Hotspots Map from {start_date} to {end_date}...")
#         fig = px.scatter_mapbox(
#             df_filtered,
#             lat="latitude",
#             lon="longitude",
#             color="brightness",
#             hover_data=["acq_datetime", "confidence"],
#             mapbox_style="carto-positron",
#             zoom=10,
#             center={"lat": 34.0522, "lon": -118.2437}
#         )

#         # Show map
#         fig.show()
# else:
#     print("No data available to display.")

